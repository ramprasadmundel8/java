import java.util.LinkedList;
class SharedBuffer
{
private final LinkedList<Integer> buffer=new LinkedList<>();
private final int capacity;
public SharedBuffer(int capacity)
{
this.capacity=capacity;
}
public void producer(int item) throws InterruptedException
{
synchronized(this)
{
while(buffer.size()==capacity)
{
wait();
}
buffer.add(item);
System.out.println("Producing item is : "+item);
notifyAll();
}
}
public int consume() throws InterruptedException
{
synchronized(this)
{
while(buffer.isEmpty())
{
wait();
}
int item=buffer.removeFirst();
System.out.println("Consuming Item is : "+item);
notifyAll();
// Thread.sleep(1000)
return item;
}
}
}
class Producer implements Runnable
{
    private final SharedBuffer sharedBuffer;
    public Producer(SharedBuffer sharedBuffer)
    {
    this.sharedBuffer=sharedBuffer;
    }
    @Override
    public void run()
    {
    for (int i=1;i<=5; i++)
    {
    try{
    sharedBuffer.producer(i);
    Thread.sleep(1000);
    }
    catch(InterruptedException e)
    {
    Thread.currentThread().interrupt();
    }
    }
    }
    }
    class Consumer implements Runnable
    {
    private final SharedBuffer sharedBuffer;
    public Consumer(SharedBuffer sharedBuffer)
    {
    this.sharedBuffer=sharedBuffer;
    }
    @Override
    public void run()
    {
    for (int i=1;i<=5; i++)
    {
    try{
    sharedBuffer.consume();
    Thread.sleep(1000);
    }
    catch(InterruptedException e)
    {
    Thread.currentThread().interrupt();
    }
    }
    }
    }
   public class pg10
   // public class ThreadDemo
    {
    public static void main(String[] args)
    {
    SharedBuffer sharedBuffer = new SharedBuffer(5);
    Thread producerThread = new Thread(new Producer(sharedBuffer));
    Thread consumerThread = new Thread(new Consumer(sharedBuffer));
    producerThread.start();
    consumerThread.start();
    }
    }  
